#include <string>
#include <algorithm>
#include <iostream>
#include <queue>
#include <utility>
#include <stdio.h>
#include <cmath>

 
using namespace std;
 
int mp[51][51] = {0, };
bool visitied[51][51] = { false, };
int M, N, K;

int dx[4] = { 0,1,0,-1 };//인접한 곳만 갈 수 있도록 하는 변수
int dy[4] = { 1,0,-1,0 };
queue<pair<int, int>> que;
int answer=0;
 
 
void BFS(int x, int y)
{
    
    que.push(make_pair(x,y));
    
    while(!que.empty())
    {
        int tmpx = que.front().first;
        int tmpy = que.front().second;
      //  visitied[tmpx][tmpy] = true;
        que.pop();
        
        for(int i=0; i<4; i++)
        {
            int nx = tmpx + dx[i];
            int ny = tmpy + dy[i];
            
            if((!visitied[nx][ny]) && (nx >= 0) && (nx < N) && (ny >= 0) && (ny < M) && (mp[nx][ny]==1))
            {
                visitied[nx][ny] = true;
                que.push(make_pair(nx,ny));
            }
        }
    }
 
}

void init(int N, int M)
{
    while(!que.empty())que.pop();
    for(int i =0; i<N; i++)
    {
        for(int j=0; j<M; j++)
        {
            mp[i][j]=0;
            visitied[i][j]=false;
        }
    }
    answer = 0;
}
 
int main() {
    int T;
    cin >> T;
 
    
    while (T > 0)
    {
        init(N,M);
        cin >> M >> N >> K;
        
        //mp 초기화하기
        for (int i = 0; i < K; i++)
        {
            int x; int y;
            cin >> x >> y;
            mp[y][x] = 1;
        }
        
        for(int i=0; i<N; i++)
        {
            for(int j=0; j<M; j++)
            {
                if((mp[i][j]==1) && (!visitied[i][j]))
                {
                    visitied[i][j]=true;
                    answer++;
                    BFS(i,j);
                }
            }
        }
        cout<<answer<<'\n';
       
        T--;
    }
}
