//
//  main.cpp
//  Baekjoon
//
//  Created by 이준후
//  Copyright © 2020 이준후. All rights reserved.
//

#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>


using namespace std;

#define MAX 2001

bool check[1001];//갔다온지 확인하는 행렬
bool arr[MAX][MAX]; //인접행렬
vector<int> list[MAX]; //인접리스트
vector<pair<int,int>>edges; //간선리스트

void dfs(int x, int n)
{
    check[x]=true;
    for(int i=1; i<=n; i++)
    {
        if(arr[x][i] == true && check[i] ==false)//x, i가 연결되어있고 i를 가보지 않았던 경우
        {
            dfs(i, n);
        }
    }
}

void bfs(int x, int N)
{
    queue<int> q;
    check[x] = true;
    q.push(x);
    while (!q.empty())
    {
        int x = q.front();
        q.pop();
        for(int i=1; i<=N; i++)
        {
            if(arr[x][i] == true && check[i] == false)
            {
                check[i] = true;
                q.push(i);
            }
        }
    }
    cout <<'\n';
}



int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    
    int N, M; //정점 개수, 간선 개수
    cin >> N >> M;
 
    
    
    for(int i=0; i<M; i++)
    {
        int from,to;
        cin >> from >> to;
        edges.push_back({from, to});
        edges.push_back({to, from});
        arr[from][to] = arr[to][from] = true;
        list[from].push_back(to);
        list[to].push_back(from);
    }
    
    
    int cnt=0;
    
    for(int i = 1; i<=N; i++)
    {
        if(check[i] == true)
        {
            continue;
        }
        else{
            dfs(i, N);
            cnt++;
        }
    }
    
    cout << cnt <<'\n';
    return 0;
}
