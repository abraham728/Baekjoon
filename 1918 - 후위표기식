#include <iostream>
#include <stack>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

stack<char> st;

void postfix(char oper)
{
    if(oper == '(') // open operator
    {
        st.push(oper);
    }
    else if(oper == ')') //close operator
    {
        while(st.top() != '(')
        {
            cout<<st.top();
            st.pop();
        }
        st.pop();
    }
    else // when normal operator
    {
       if(oper == '*' || oper == '/')
       {
           while(!st.empty() && (st.top() == '*' || st.top() == '/' )  )
           {
               cout<<st.top();
               st.pop();
           }// 이게 더 작은 경우니까.....
           st.push(oper);
       }
        else if( oper== '+' ||oper == '-')
        {
            while(!st.empty() &&  ( st.top() != '(' ) ) // ( 여는 괄호가 나올 때까지 다 뺀다.
            {
                cout<<st.top();
                st.pop();
            }
            st.push(oper);
        }
    }
    
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    
    string middle;
    cin>>middle;
    

    
    for(int i=0; i<middle.length(); ++i)
    {
        if(middle[i] != '+' && middle[i] != '-' && middle[i] != '*' && middle[i] != '/'  && middle[i] != '(' && middle[i] != ')')//case miidle[i] is alphabet
        {
            cout<<middle[i];
        }
        else
        {
            postfix(middle[i]);
        }
    }
    while(!st.empty())
    {
        cout<<st.top();
        st.pop();
    }
    return 0;
}


